# Global python functions
global !p

def fmtStateIdent(ident):
	if 0 == len(ident):
		return ""

	return ident[0] + ''.join(x for x in ident.title())[1:].replace("_","")

endglobal

# The snippets
snippet :r-action-type "" b
export default $1 = '$1';
$0
endsnippet


snippet :r-action-creator "" b
export const $1 = ($2) =>
	async function(dispatch) {
		$0

		dispatch({
			type: $3,
			payload: {
			}
		});
	};
endsnippet


snippet :r-action-creator-tc "" b
export const $1 = ($2) =>
	async function(dispatch) {
		try {
			$0

			dispatch({
				type: $3,
				payload: {
				}
			});
		} catch(err) {
			dispatch({
				type: $4,
				payload: {
					message: err.body ? err.body.message : err.message,
					status: err.status
				}
			});
		}
	};
endsnippet


snippet :r-reducer-file "" b
/*
$1
*/
import createReducer from 'app/common/reducer';
import {
	$2,
	$3_RESET
} from '../actions/$4';

const initialState = {
	$5
};

const reducers = {

	[$7](state, action) {
		$0
	},

	// Returns the initial state
	[$3_RESET]() {
		return initialState;
	}
};

export default {
	$6: createReducer(reducers, initialState)
};
endsnippet

snippet :r-reducer
	// $1
	// state	Current state
	${4:// action	Flux Standard Action}
	//
	// Returns the next state
	[$2](state${3:, action}) {
		$0
	}
endsnippet

snippet :r-container
/*
$1
*/
import { PureComponent } from 'react';
import { createSelector } from 'reselect';
import { connect } from 'react-redux';
import { $2, reset } from '../actions/$3';
import { bindAll } from 'app/common/utils';

@connect(createSelector( state => state.$4, (`!p snip.rv = fmtStateIdent(t[4])`) => ({ `!p snip.rv = fmtStateIdent(t[4])` })
export default class $5 extends PureComponent {

	constructor(props) {
		super(props);

		bindAll(this, ['load']);
	}

	render() {
	}

	componentWillUnmount() {
		this.props.dispatch(reset());
	}

	componentDidMount() {
		this.load();
	}

	load() {
		// TODO Perform loading
	}
}
endsnippet

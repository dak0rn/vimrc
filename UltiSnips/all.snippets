# Snippet configuration

## JavaScript snippets

# React container
snippet :react-cont
import { Component } from 'react';
import { createSelector } from 'reselect';
import { connect } from 'react-redux';

export class $1 extends Component {

	constructor(props) {
		super(props);
	}

	render() {
		return $0;
	}

	shouldComponentUpdate() {
		return false;
	}

	componentWillMount() {
	}

}

const mapStateToProps = createSelector(
	// Filters
	state => state.$2,

	${3:$2} => ({ $3 })
);
export default connect(mapStateToProps)($1);
endsnippet

# React component
snippet :react-component
import { Component } from 'react';

export default class $1 extends Component {

	render() {
		return $0;
	}

}
endsnippet

# Reducer skeleton
snippet :redux-reducer
import createReducer from '${1:unnest-reducer}';
import * as Actions from '$2';
import ${3:Immutable} from '${4:seamless-immutable}';

const initial = ${5:Immutable}({
});

const reducers = {

	$0

};

export default createReducer(reducers, initial);
endsnippet

snippet :reducer-fn
/**
 * $2
 *
 * @param {${3:object}} state Current state
 * @param {FSA} action Flux Standard Action
 * @return {$3} Next state
 */
[ Actions.$1 ](state, action) {
	$0
}
endsnippet

snippet :reducer-async-fn
/*
 * $2
 */
[ Actions.$1 ]: {

	/**
	 * $3
	 *
	 * @param {${4:object}} state Current state
	 * @return {$4} Next state
	 */
	PENDING(state) {
		return state.merge({
			${5:loading}: true,
			$5Failed: false
		});
	},

	/**
	 * $6
	 *
	 * @param {$4} state Current state
	 * @return {$4} Next state
	 */
	REJECTED(state) {
		return state.merge({
			$5: false,
			$5Failed: true
		});
	},

	/**
	 * $7
	 *
	 * @param {$4} state Current state
	 * @param {FSA} action Flux Standard Action
	 * @return {$4} Next state
	 */
	FULFILLED(state, action) {
		const { body } = action.payload;
		$0

		return state.merge({
			$5: false
		});
	}
}
endsnippet
